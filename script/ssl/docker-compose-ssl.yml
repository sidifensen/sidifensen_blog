services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: sidifensen-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Shanghai
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ${PROJECT_ROOT}/sql/sidifensen_blog.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sidifensen-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: sidifensen-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}", "--user", "default", "off", "--user", "${REDIS_USERNAME}", "on", "+@all", "~*", "&*", ">${REDIS_PASSWORD}"]
    networks:
      - sidifensen-network
    healthcheck:
      test: ["CMD", "redis-cli", "--user", "${REDIS_USERNAME}", "-a", "${REDIS_PASSWORD}", "ping"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s

  # MinIO 对象存储
  minio:
    image: minio/minio:RELEASE.2025-04-08T15-41-24Z
    container_name: sidifensen-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER: on
      MINIO_BROWSER_LOGIN_ANIMATION: on
      MINIO_BROWSER_SESSION_DURATION: 12h
      MINIO_IDENTITY_OPENID_ENABLE: "false"
      MINIO_IDENTITY_LDAP_ENABLE: "false"
      MINIO_IDENTITY_PLUGIN_ENABLE: "false"
      MINIO_REGION: us-east-1
      MINIO_SKIP_CLIENT: "true"
      # HTTPS 配置
      MINIO_SERVER_URL: ${MINIO_PUBLIC_POINT}
      # MINIO_BROWSER_REDIRECT_URL: ${MINIO_CONSOLE_PUBLIC_POINT}  # 注释掉自动重定向
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001" --quiet
    networks:
      - sidifensen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 20s
      retries: 3
      interval: 30s
      start_period: 20s

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: sidifensen-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sidifensen-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      timeout: 30s
      retries: 10
      interval: 10s
      start_period: 60s

  # 后端服务
  backend:
    build:
      context: ${PROJECT_ROOT}/sidifensen_blog_backend
      dockerfile: Dockerfile
    image: sidifensen-blog-backend
    container_name: sidifensen-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:5000"
    environment:
      # 时区配置
      TZ: Asia/Shanghai

      # Spring Boot 配置
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}

      # 数据库配置
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USERNAME: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

      # Redis 配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # MinIO 配置
      MINIO_ENDPOINT: http://minio:9000 #java后端连接minio服务的地址
      MINIO_PUBLIC_POINT: ${MINIO_PUBLIC_POINT} #生成的图片地址
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}

      # RabbitMQ 配置
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}

      # 邮件配置
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}

      # OAuth 配置
      GITEE_CLIENT_ID: ${GITEE_CLIENT_ID}
      GITEE_CLIENT_SECRET: ${GITEE_CLIENT_SECRET}
      GITEE_REDIRECT_URI: ${GITEE_REDIRECT_URI}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI}

      # 前端地址配置（更新为HTTPS）
      FRONTEND_USER_HOST: https://sidifensen.com/
      FRONTEND_ADMIN_HOST: https://admin.sidifensen.com/

      # 阿里云配置
      ALIYUN_ACCESS_KEY_ID: ${ALIYUN_ACCESS_KEY_ID}
      ALIYUN_ACCESS_KEY_SECRET: ${ALIYUN_ACCESS_KEY_SECRET}

      # 自定义配置
      SIDIFENSEN_JWT_SECRET: ${SIDIFENSEN_JWT_SECRET}
      SIDIFENSEN_PHOTO_AUTO_AUDIT: ${SIDIFENSEN_PHOTO_AUTO_AUDIT}
      SIDIFENSEN_ARTICLE_AUTO_AUDIT: ${SIDIFENSEN_ARTICLE_AUTO_AUDIT}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - sidifensen-network

  # Nginx 网关容器（支持SSL）
  nginx-gateway:
    image: nginx:alpine
    container_name: sidifensen-nginx
    restart: unless-stopped
    ports:
      - "80:80" # HTTP端口（用于重定向和Let's Encrypt验证）
      - "443:443" # HTTPS端口
    volumes:
      # SSL配置文件
      - ./nginx-ssl.conf:/etc/nginx/conf.d/default.conf
      # SSL证书文件
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/nginx/ssl:/etc/nginx/ssl:ro
      # Let's Encrypt验证目录
      - ./certbot-webroot:/var/www/certbot:ro
    depends_on:
      - frontend-admin
      - frontend-user
    networks:
      - sidifensen-network

  # 前端管理端
  frontend-admin:
    build:
      context: ${PROJECT_ROOT}/sidifensen_blog_frontend/sidifensen_admin
      dockerfile: Dockerfile
    image: sidifensen-blog-admin
    container_name: sidifensen-admin
    restart: unless-stopped
    ports:
      - "${ADMIN_PORT}:80" # 保留端口访问
    depends_on:
      - backend
    networks:
      - sidifensen-network

  # 前端用户端
  frontend-user:
    build:
      context: ${PROJECT_ROOT}/sidifensen_blog_frontend/sidifensen_user
      dockerfile: Dockerfile
    image: sidifensen-blog-user
    container_name: sidifensen-user
    restart: unless-stopped
    ports:
      - "${USER_PORT}:80" # 保留端口访问
    depends_on:
      - backend
    networks:
      - sidifensen-network

# 数据卷
volumes:
  mysql_data:
    driver: local
    name: sidifensen-mysql-data
  redis_data:
    driver: local
    name: sidifensen-redis-data
  minio_data:
    driver: local
    name: sidifensen-minio-data
  rabbitmq_data:
    driver: local
    name: sidifensen-rabbitmq-data

# 网络
networks:
  sidifensen-network:
    driver: bridge
    name: sidifensen-blog-network
