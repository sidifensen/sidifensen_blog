---
alwaysApply: true
---

# Java Spring Boot MVC 项目规则

## 项目架构

- 基于 Spring Boot 3.1.4 + Java 21 的 MVC 架构
- 使用 MyBatis-Plus 作为 ORM 框架
- 采用 RESTful API 设计风格
- 包结构遵循标准 MVC 分层架构
- **🔧 项目启动：不需要 Cursor 帮助重新编译项目，开发者会手动重新启动项目**

## 包结构规范

```
com.sidifensen/
├── controller/          # 控制器层
├── service/            # 业务逻辑层
│   └── impl/          # 业务逻辑实现
├── mapper/            # 数据访问层
├── domain/            # 领域模型
│   ├── entity/        # 实体类
│   ├── dto/          # 数据传输对象
│   ├── vo/           # 视图对象
│   ├── result/       # 结果封装
│   ├── enums/        # 枚举类
│   └── constants/    # 常量类
├── config/           # 配置类
├── utils/           # 工具类
└── exception/       # 异常处理
```

## 编码规范

### 1. 类命名规范

- Controller: `XxxController`
- Service 接口: `XxxService`
- Service 实现: `XxxServiceImpl`
- Entity: 使用业务名称，如 `Article`, `User`
- DTO: `XxxDto`
- VO: `XxxVo`
- Mapper: `XxxMapper`

### 2. 注解使用规范

- Controller 类必须使用 `@RestController`
- Service 实现类使用 `@Service`
- 依赖注入使用 `@Resource` 而非 `@Autowired`
- 日志使用 `@Slf4j`
- 实体类使用 `@Data`, `@EqualsAndHashCode(callSuper = false)`, `@Accessors(chain = true)`

### 3. Controller 层规范

- 使用 `@RequestMapping` 定义基础路径
- HTTP 方法映射：
  - GET: `@GetMapping`
  - POST: `@PostMapping`
  - PUT: `@PutMapping`
  - DELETE: `@DeleteMapping`
- 参数校验使用 `@NotNull`, `@Valid` 等注解
- 权限控制使用 `@PreAuthorize`
- 统一返回 `Result` 对象

### 4. Service 层规范

- 继承 `ServiceImpl<XxxMapper, XxxEntity>` 并实现 `XxxService`
- 业务异常抛出 `BlogException`
- 复杂查询使用 `LambdaQueryWrapper`
- 分页使用 `Page<T>` 和 `PageVo<T>`

### 5. Entity 规范

- 必须使用 `@Data` 注解（自动生成 getter/setter/toString/equals/hashCode）
- 使用 MyBatis-Plus 注解：
  - `@TableName` 指定表名
  - `@TableId(type = IdType.AUTO)` 主键自增
  - `@TableField(fill = FieldFill.INSERT)` 创建时间
  - `@TableField(fill = FieldFill.INSERT_UPDATE)` 更新时间
  - `@TableLogic` 逻辑删除
- 字段校验使用 `@Min`, `@Max` 等注解

### 6. 异常处理规范

- 统一异常处理使用 `@RestControllerAdvice`
- 业务异常使用自定义 `BlogException`
- 异常信息定义在常量类中

### 7. 工具类规范

- 安全工具类: `SecurityUtils`
- 对象转换使用 `BeanUtil.copyProperties`
- 空值判断使用 `ObjectUtil.isEmpty/isNotEmpty`
- 日期处理使用 `DateUtil`

### 8. 数据库操作规范

- 使用 MyBatis-Plus 的 Lambda 表达式
- 批量操作优先使用 MyBatis-Plus 提供的方法
- 复杂查询写在 Mapper XML 中
- 避免 N+1 查询问题

### 9. 配置规范

- 多环境配置: `application-{profile}.yaml`
- 自定义配置类使用 `@ConfigurationProperties`
- 敏感信息不要硬编码

### 10. 日志规范

- 使用 `@Slf4j` 注解
- 关键业务操作记录日志
- 异常必须记录日志
- 日志级别合理使用

## 代码示例

### Controller 示例

```java
@RestController
@RequestMapping("/article")
public class ArticleController {

    @Resource
    private ArticleService articleService;

    @GetMapping("/list")
    public Result getArticleList(@NotNull Integer pageNum, @NotNull Integer pageSize) {
        PageVo<List<ArticleVo>> result = articleService.getArticleList(pageNum, pageSize);
        return Result.success(result);
    }

    @PreAuthorize("hasAuthority('article:delete')")
    @DeleteMapping("/admin/{articleId}")
    public Result adminDeleteArticle(@PathVariable Integer articleId) {
        articleService.adminDeleteArticle(articleId);
        return Result.success();
    }
}
```

### Service 示例

```java
@Service
@Slf4j
public class ArticleServiceImpl extends ServiceImpl<ArticleMapper, Article> implements ArticleService {

    @Resource
    private ArticleMapper articleMapper;

    @Override
    public PageVo<List<ArticleVo>> getArticleList(Integer pageNum, Integer pageSize) {
        Page<Article> page = new Page<>(pageNum, pageSize);
        LambdaQueryWrapper<Article> qw = new LambdaQueryWrapper<Article>()
                .eq(Article::getExamineStatus, ExamineStatusEnum.PASS.getCode())
                .orderByDesc(Article::getCreateTime);

        List<Article> articles = articleMapper.selectPage(page, qw).getRecords();
        List<ArticleVo> articleVos = BeanUtil.copyToList(articles, ArticleVo.class);

        return new PageVo<>(articleVos, page.getTotal());
    }
}
```

### Entity 示例

```java
@Data
@EqualsAndHashCode(callSuper = false)
@Accessors(chain = true)
@TableName("article")
public class Article implements Serializable {

    @TableId(value = "id", type = IdType.AUTO)
    private Integer id;

    private String title;

    @Min(value = 0, message = "审核状态错误")
    @Max(value = 2, message = "审核状态错误")
    private Integer examineStatus;

    @TableField(fill = FieldFill.INSERT)
    private Date createTime;

    @TableField(fill = FieldFill.INSERT_UPDATE)
    private Date updateTime;

    @TableLogic
    private Integer isDeleted;
}
```

## 最佳实践

1. 遵循单一职责原则，每个类只负责一个功能
2. 使用合适的设计模式，如策略模式处理不同业务逻辑
3. 代码要有适当的注释，特别是业务逻辑复杂的地方
4. 及时处理 TODO 和 FIXME 注释
5. 定期重构，保持代码整洁
6. 编写单元测试确保代码质量
7. 使用线程池处理异步任务
8. 合理使用缓存提升性能
9. 注意防止 SQL 注入和 XSS 攻击
10. 遵循 RESTful API 设计规范
11. **🚀 项目部署：代码修改完成后，开发者会手动重新启动 Spring Boot 项目，无需 AI 协助编译或运行**
