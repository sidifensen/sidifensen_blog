server:
  port: 5000
spring:
  application:
    name: sidifensen-blog
  mvc:
    throw-exception-if-no-handler-found: true # 禁用默认的 404 处理
  web:
    resources:
      add-mappings: false # 禁用默认资源映射
  servlet:
    multipart:
      max-file-size: 10MB # 文件上传最大大小
      max-request-size: 10MB # 请求体最大大小
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss # Date 日期格式化
    time-zone: GMT+8
  datasource:
    hikari:
      maximum-pool-size: 50 # 增加连接池大小
      minimum-idle: 10 # 最小空闲连接
      connection-timeout: 30000 # 连接超时时间
      idle-timeout: 240000 # 空闲连接超时，设置为4分钟，小于max-lifetime
      max-lifetime: 300000 # 连接最大生命周期，设置为5分钟，确保远小于MySQL的wait_timeout
      connection-test-query: SELECT 1 # 连接测试查询
      validation-timeout: 3000 # 连接验证超时时间
      leak-detection-threshold: 60000 # 连接泄漏检测阈值
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:sidifensen_blog}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&useSSL=false&connectTimeout=30000&socketTimeout=30000
    username: ${MYSQL_USERNAME:root}
    password: ${MYSQL_PASSWORD:root}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 0
      username: ${REDIS_USERNAME:}
      password: ${REDIS_PASSWORD:}
      timeout: 10s
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 1
        shutdown-timeout: 100ms
  mail:
    host: smtp.qq.com
    port: 465
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true # 开启SMTP认证
          starttls:
            enable: true # 开启TLS协议
            required: true # 要求使用TLS协议
          ssl:
            enable: true # 开启SSL协议
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: /
    connection-timeout: 60000 # 连接超时时间(毫秒)
    requested-heartbeat: 60 # 心跳检测间隔(秒)
    # 发布者确认机制（消息发送端确认）
    publisher-confirm-type: correlated # 开启发布者确认（异步确认）
    publisher-returns: true # 开启发布者返回（消息无法路由时返回）
    template:
      mandatory: true # 开启强制消息返回，如果消息无法路由到队列，则返回给生产者
    listener:
      simple:
        # 消费者确认机制
        acknowledge-mode: auto # 自动确认模式（成功消费后自动ACK，异常时自动NACK并重试）
        # 消费者重试机制
        retry:
          enabled: true # 是否开启消费者重试
          max-attempts: 5 # 最大重试次数（包括首次消费）
          initial-interval: 5000 # 首次重试间隔时间（单位毫秒）
          multiplier: 2.0 # 间隔时间乘数（每次重试间隔时间 = 上次间隔时间 * multiplier）
          max-interval: 30000 # 重试最大时间间隔（单位毫秒）
          stateless: true # 无状态重试（true：重试时不保存消息状态，性能更好）
        # 预取数量（消费者每次从队列预取的消息数量）
        prefetch: 1 # 每次只取1条消息，确保消息均匀分配和及时重试
        # 并发配置
        concurrency: 5 # 监听器最小并发数
        max-concurrency: 10 # 监听器最大并发数
        # 默认重新入队（配合死信队列使用）
        default-requeue-rejected: false # 重试失败后不重新入队，而是发送到死信队列
minio: # minio 配置
  endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
  publicPoint: ${MINIO_PUBLIC_POINT:http://localhost:9000}
  accessKey: ${MINIO_ACCESS_KEY:minioadmin}
  secretKey: ${MINIO_SECRET_KEY:minioadmin123}
  bucketName: sidifensen-blog
oauth:
  # gitee 登录
  gitee:
    client-id: ${GITEE_CLIENT_ID} # gitee 客户端ID
    client-secret: ${GITEE_CLIENT_SECRET} # gitee 客户端密钥
    redirect-uri: ${GITEE_REDIRECT_URI:http://localhost:5000/oauth/gitee/callback}
  # gitub 登录
  github:
    client-id: ${GITHUB_CLIENT_ID:} # github 客户端ID
    client-secret: ${GITHUB_CLIENT_SECRET:} # github 客户端密钥
    redirect-uri: ${GITHUB_REDIRECT_URI:http://localhost:5000/oauth/github/callback} # github 重定向URI
  # qq 登录
  qq:
    client-id: ${QQ_CLIENT_ID:} # qq 客户端ID
    client-secret: ${QQ_CLIENT_SECRET:} # qq 客户端密钥
    redirect-uri: ${QQ_REDIRECT_URI:http://localhost:5000/oauth/qq/callback} # qq 重定向URI
frontend:
  userHost: ${FRONTEND_USER_HOST:http://localhost:7000/} # 前端用户地址
  adminHost: ${FRONTEND_ADMIN_HOST:http://localhost:8000/} # 前端管理员地址
# 阿里云配置
aliyun:
  accessKeyId: ${ALIYUN_ACCESS_KEY_ID}
  accessKeySecret: ${ALIYUN_ACCESS_KEY_SECRET}
  imageaudit:
    endpoint: imageaudit.cn-shanghai.aliyuncs.com
sidifensen:
  jwt: ${SIDIFENSEN_JWT_SECRET:sidifensen} # jwt 密钥
  PhotoAutoAudit: ${SIDIFENSEN_PHOTO_AUTO_AUDIT:false} # 是否开启图片自动审核
  ArticleAutoAudit: ${SIDIFENSEN_ARTICLE_AUTO_AUDIT:false} # 是否开启文章自动审核
  CommentAutoAudit: ${SIDIFENSEN_COMMENT_AUTO_AUDIT:false} # 是否开启评论自动审核
  AllowOrigins:
    - http://localhost:7000
    - http://localhost:8000
    - http://127.0.0.1:7000
    - http://127.0.0.1:8000
    - http://115.190.116.72:7000
    - http://115.190.116.72:8000
logging:
  level:
    org.springframework.boot.autoconfigure: INFO
    org.springframework.boot.autoconfigure.logging: INFO
    org.springframework: INFO
    org.springframework.boot.context.properties: INFO
    org.springframework.core.env: INFO
    org.springframework.boot.env: INFO
